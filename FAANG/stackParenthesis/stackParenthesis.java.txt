class Solution {
    public boolean isValid(final String s) {
        final Stack<Character> characterStack = new Stack<>();
        final Map<Character, Character> charMap = new HashMap<>();

        charMap.put('}', '{');
        charMap.put(']', '[');
        charMap.put(')', '(');

        for (int i = 0; i < s.length(); i++) {
            final Character currentChar = s.charAt(i);
            if (charMap.get(currentChar) == null) {
                characterStack.add(currentChar);
            } else {
                
                if(characterStack.isEmpty()){
                    return false;
                }
                
                final Character previousBracket = characterStack.pop();
                if (previousBracket != charMap.get(currentChar)) {
                    return false;
                }
            }
        }

        return characterStack.isEmpty();
    }
}