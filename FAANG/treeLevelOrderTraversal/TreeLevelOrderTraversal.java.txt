/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(final TreeNode root) {

        if (root == null) {
            return Collections.emptyList();
        }

        final List<List<Integer>> resultArray = new ArrayList<>();
        List<Integer> levelValues = new ArrayList<>();
        final Queue<TreeNode> nodeQueue = new LinkedList<>();

        nodeQueue.add(root);

        while (nodeQueue.size() > 0) {

            final Integer queueSize = nodeQueue.size();
            Integer count = 0;

            levelValues = new ArrayList<>();

            while (count < queueSize) {

                final TreeNode currentNode = nodeQueue.poll();
                levelValues.add(currentNode.val);

                if (currentNode.left != null) {
                    nodeQueue.add(currentNode.left);
                }

                if (currentNode.right != null) {
                    nodeQueue.add(currentNode.right);
                }

                count++;
            }

            resultArray.add(levelValues);
        }

        return resultArray;
    }
}